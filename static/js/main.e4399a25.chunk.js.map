{"version":3,"sources":["modules/useAuth/authContext.ts","modules/useAuth/Auth.tsx","modules/useAuth/authProvider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaults","authOpen","isAuthenticated","user","id","name","userImageUrl","userImageThumbnailUrl","AuthContext","React","createContext","authState","dispatch","useStyles","makeStyles","theme","createStyles","appBar","position","title","marginLeft","spacing","flex","Transition","forwardRef","props","ref","Slide","direction","_","useContext","classes","close","Dialog","fullScreen","open","onClose","TransitionComponent","AppBar","className","Toolbar","IconButton","edge","color","onClick","Typography","variant","Button","autoFocus","List","ListItem","button","ListItemText","primary","secondary","Divider","useState","state","Provider","value","payload","Auth","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0JAkBMA,EAAW,CACbC,UAAU,EACVC,iBAAiB,EACjBC,KAAM,CACFC,GAAI,GACJC,KAAM,GACNC,aAAc,GACdC,sBAAuB,KAIzBC,EAAcC,IAAMC,cAA2B,CACjDC,UAAWX,EACXY,SAAU,e,2ICZRC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,OAAQ,CACNC,SAAU,YAEZC,MAAO,CACLC,WAAYL,EAAMM,QAAQ,GAC1BC,KAAM,QAKNC,EAAad,IAAMe,YAAW,SAClCC,EACAC,GAEA,OAAO,cAACC,EAAA,EAAD,aAAOC,UAAU,KAAKF,IAAKA,GAASD,OAuD9BI,EApDL,WACR,MAAgCpB,IAAMqB,WAAWtB,GAAzCG,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAEbmB,EAAUlB,IAEVmB,EAAQ,WACZpB,EAAS,CACPX,UAAU,KAId,OACE,eAACgC,EAAA,EAAD,CACEC,YAAU,EACVC,KAAMxB,EAAUV,SAChBmC,QAASJ,EACTK,oBAAqBd,EAJvB,UAME,cAACe,EAAA,EAAD,CAAQC,UAAWR,EAAQd,OAA3B,SACE,eAACuB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,UACNC,QAASZ,EACT,aAAW,QAJb,SAME,cAAC,IAAD,MAEF,cAACa,EAAA,EAAD,CAAYC,QAAQ,KAAKP,UAAWR,EAAQZ,MAA5C,mBAGA,cAAC4B,EAAA,EAAD,CAAQC,WAAS,EAACL,MAAM,UAAUC,QAASZ,EAA3C,uBAKJ,eAACiB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAUC,QAAM,EAAhB,SACE,cAACC,EAAA,EAAD,CAAcC,QAAQ,iBAAiBC,UAAU,cAEnD,cAACC,EAAA,EAAD,IACA,cAACL,EAAA,EAAD,CAAUC,QAAM,EAAhB,SACE,cAACC,EAAA,EAAD,CACEC,QAAQ,gCACRC,UAAU,oBC7DPzB,EAjBL,SAACJ,GAEP,MAA0BhB,IAAM+C,SAASxD,GAAzC,mBAAOyD,EAAP,KAAc7C,EAAd,KAEA,OACI,eAACJ,EAAYkD,SAAb,CACIC,MAAO,CACHhD,UAAW8C,EACX7C,SAAU,SAACgD,GAAD,OAAkBhD,EAAS,2BAAI6C,GAAUG,MAH3D,UAMI,cAACC,EAAD,IACCpC,EAAMqC,aCLJC,MARf,WACE,OACE,cAAC,EAAD,UACE,oDCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e4399a25.chunk.js","sourcesContent":["import React from 'react';\n\ninterface AuthState {\n    authOpen: boolean;\n    isAuthenticated: boolean;\n    user: {\n        id: string;\n        name: string;\n        userImageUrl: String,\n        userImageThumbnailUrl: String\n    }\n}\n\ntype ContextType = {\n    authState: AuthState;\n    dispatch: (action: any) => void;\n};\n\nconst defaults = {\n    authOpen: true,\n    isAuthenticated: false,\n    user: {\n        id: '',\n        name: '',\n        userImageUrl: '',\n        userImageThumbnailUrl: ''\n    }\n}\n\nconst AuthContext = React.createContext<ContextType>({\n    authState: defaults,\n    dispatch: () => {}\n});\n\nexport {\n    defaults,\n    AuthContext\n};","import React from 'react'\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItem from '@material-ui/core/ListItem'\nimport List from '@material-ui/core/List'\nimport Divider from '@material-ui/core/Divider'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Slide from '@material-ui/core/Slide'\nimport { TransitionProps } from '@material-ui/core/transitions'\n\nimport { AuthContext } from './authContext'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative'\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1\n    }\n  })\n)\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />\n})\n\nconst _ = () => {\n  const { authState, dispatch } = React.useContext(AuthContext)\n\n  const classes = useStyles()\n\n  const close = () => {\n    dispatch({\n      authOpen: false\n    })\n  }\n\n  return (\n    <Dialog\n      fullScreen\n      open={authState.authOpen}\n      onClose={close}\n      TransitionComponent={Transition}\n    >\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={close}\n            aria-label=\"close\"\n          >\n            <CloseIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Sound\n          </Typography>\n          <Button autoFocus color=\"inherit\" onClick={close}>\n            save\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <List>\n        <ListItem button>\n          <ListItemText primary=\"Phone ringtone\" secondary=\"Titania\" />\n        </ListItem>\n        <Divider />\n        <ListItem button>\n          <ListItemText\n            primary=\"Default notification ringtone\"\n            secondary=\"Tethys\"\n          />\n        </ListItem>\n      </List>\n    </Dialog>\n  )\n}\n\nexport default _\n","import React from \"react\";\nimport { defaults, AuthContext } from \"./authContext\";\nimport Auth from \"./Auth\";\n\nconst _ = (props:any):any => {\n\n    const [state, dispatch] = React.useState(defaults);\n\n    return (\n        <AuthContext.Provider\n            value={{\n                authState: state,\n                dispatch: (payload: any) => dispatch({...state, ...payload})\n            }}\n        >\n            <Auth />\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default _;\n","import React from 'react'\nimport { AuthProvider } from './modules/useAuth'\n\nfunction App(): any {\n  return (\n    <AuthProvider>\n      <>Bem vindo</>\n    </AuthProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}