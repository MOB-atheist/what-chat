{"version":3,"sources":["modules/useAuth/authContext.ts","modules/useAuth/blob.svg","modules/useAuth/blob2.svg","modules/useAuth/blob3.svg","modules/useAuth/FormLogin.tsx","modules/useAuth/Auth.tsx","modules/useAuth/authProvider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaults","authOpen","isAuthenticated","user","id","name","userImageUrl","userImageThumbnailUrl","AuthContext","React","createContext","authState","dispatch","useStyles","makeStyles","theme","createStyles","form","height","width","container","item","textAlign","input","slideRight","animation","WebkitTransform","slideLeft","_","props","classes","className","open","join","onSubmit","e","preventDefault","Grid","spacing","style","alignContent","alignItems","xs","justify","md","TextField","required","fullWidth","autoFocus","margin","variant","type","label","autoComplete","Button","color","dialog","position","paper","padding","background","top","left","opacity","backgroundColor","backgrondSvg","registerButton","bottom","right","Transition","forwardRef","ref","Zoom","useContext","useState","onLogin","setOnLogin","onRegister","setOnRegister","Dialog","fullScreen","onClose","TransitionComponent","src","Blob3","alt","Blob","Blob2","Paper","onClick","FormLogin","state","Provider","value","payload","Auth","children","createTheme","palette","primary","light","main","dark","contrastText","secondary","overrides","MuiOutlinedInput","appearance","caretColor","WebkitTextFillColor","WebkitBoxShadow","MuiFilledInput","borderTopColor","borderBottomColor","borderLeftColor","borderRightColor","boxShadow","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.21ab27ad.chunk.js","sourcesContent":["import React from 'react';\n\ninterface AuthState {\n    authOpen: boolean;\n    isAuthenticated: boolean;\n    user: {\n        id: string;\n        name: string;\n        userImageUrl: String,\n        userImageThumbnailUrl: String\n    }\n}\n\ntype ContextType = {\n    authState: AuthState;\n    dispatch: (action: any) => void;\n};\n\nconst defaults = {\n    authOpen: true,\n    isAuthenticated: false,\n    user: {\n        id: '',\n        name: '',\n        userImageUrl: '',\n        userImageThumbnailUrl: ''\n    }\n}\n\nconst AuthContext = React.createContext<ContextType>({\n    authState: defaults,\n    dispatch: () => {}\n});\n\nexport {\n    defaults,\n    AuthContext\n};","export default __webpack_public_path__ + \"static/media/blob.a130f9e6.svg\";","export default __webpack_public_path__ + \"static/media/blob2.4191e76c.svg\";","export default __webpack_public_path__ + \"static/media/blob3.397bb2ed.svg\";","import React from 'react'\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\n\nimport { Button, Grid, Slide } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      height: '100%',\n      width: '100%'\n    },\n    container: {\n      height: '100%'\n    },\n    item: {\n      textAlign: 'center'\n    },\n    input: {\n      width: '50%'\n    },\n    slideRight: {\n      animation: '$slideRight 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;'+\n      ` animation: slide-right 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;`\n    },\n    '@-webkit-keyframes slide-right': {\n      '&0%': {\n        WebkitTransform: 'translateX(0); transform: translateX(0);'\n      },\n      '&100%': {\n        WebkitTransform: 'translateX(100px); transform: translateX(100px);'\n      }\n    },\n    '@keyframes slide-right': {\n      '&0%': {\n        WebkitTransform: 'translateX(0); transform: translateX(0);'\n      },\n      '&100%': {\n        WebkitTransform: 'translateX(100px); transform: translateX(100px);'\n      }\n    },\n    slideLeft: {\n      animation: '$slideLeft 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;'+\n      ` animation: slide-left 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;`\n    },\n    '@-webkit-keyframes slide-left': {\n      '&0%': {\n        WebkitTransform: 'translateX(0); transform: translateX(0);'\n      },\n      '&100%': {\n        WebkitTransform: 'translateX(-100px); transform: translateX(-100px);'\n      }\n    },\n    '@keyframes slide-left': {\n      '&0%': {\n        WebkitTransform: 'translateX(0); transform: translateX(0);'\n      },\n      '&100%': {\n        WebkitTransform: 'translateX(-100px); transform: translateX(-100px);'\n      }\n    }\n  })\n)\n\nconst _ = (props: any) => {\n  const classes = useStyles()\n\n  return (\n    <div\n      className={[\n        (props.open ? classes.slideRight : classes.slideLeft),\n        classes.container\n      ].join(' ')}\n    >\n      {props.open && (\n        <form\n          className={classes.form}\n          onSubmit={(e) => {\n            e.preventDefault()\n            props.onSubmit(e)\n          }}\n        >\n          <Grid\n            container\n            className={classes.container}\n            spacing={3}\n            style={{ height: '100%' }}\n            alignContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={12} className={classes.item}>\n              <h2>Login</h2>\n            </Grid>\n            <Grid\n              container\n              item\n              xs={12}\n              justify=\"center\"\n              className={classes.item}\n            >\n              <Grid item xs={12} md={6}>\n                <TextField\n                  required\n                  fullWidth\n                  autoFocus\n                  margin=\"normal\"\n                  variant=\"filled\"\n                  type=\"text\"\n                  label=\"Nickname\"\n                  id=\"nickname\"\n                  name=\"nickname\"\n                  autoComplete=\"nickname\"\n                />\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              item\n              xs={12}\n              justify=\"center\"\n              className={classes.item}\n            >\n              <Grid item xs={12} md={6}>\n                <TextField\n                  required\n                  fullWidth\n                  margin=\"normal\"\n                  variant=\"filled\"\n                  type=\"password\"\n                  id=\"password\"\n                  name=\"password\"\n                  label=\"Password\"\n                  autoComplete=\"password\"\n                />\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              item\n              xs={12}\n              justify=\"center\"\n              className={classes.item}\n            >\n              <Grid item xs={12} md={6}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"submit\"\n                  fullWidth\n                >\n                  Login\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </div>\n  )\n}\n\nexport default _\n","import React from 'react'\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport { TransitionProps } from '@material-ui/core/transitions'\n\nimport { AuthContext } from './authContext'\nimport { Paper, Zoom, Slide, Button } from '@material-ui/core'\n\nimport Blob from './blob.svg'\nimport Blob2 from './blob2.svg'\nimport Blob3 from './blob3.svg'\nimport FormLogin from './FormLogin'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    dialog: {\n      height: '100%',\n      width: '100%',\n      position: 'relative'\n    },\n    paper: {\n      width: '100%',\n      height: '100%',\n      padding: theme.spacing(2)\n    },\n    form: {\n      height: '100%',\n      width: '100%'\n    },\n    container: {\n      height: '100%'\n    },\n    item: {\n      textAlign: 'center'\n    },\n    input: {\n      width: '50%'\n    },\n    background: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      opacity: 0.5,\n      backgroundColor: '#000'\n    },\n    backgrondSvg: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    registerButton: {\n      position: 'absolute',\n      bottom: theme.spacing(2),\n      right: theme.spacing(2)\n    }\n  })\n)\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>\n) {\n  return <Zoom ref={ref} {...props} />\n})\n\nconst _ = () => {\n  const { authState, dispatch } = React.useContext(AuthContext)\n  const [onLogin, setOnLogin] = React.useState(true)\n  const [onRegister, setOnRegister] = React.useState(false)\n\n  const classes = useStyles()\n\n  const close = () => {\n    dispatch({\n      authOpen: false\n    })\n  }\n\n  return (\n    <Dialog\n      fullScreen\n      className={classes.dialog}\n      open={true}\n      onClose={close}\n      TransitionComponent={Transition}\n    >\n      <div className={classes.background}>\n        <img className={classes.backgrondSvg} src={Blob3} alt=\"blob3\" />\n        <img className={classes.backgrondSvg} src={Blob} alt=\"blob\" />\n        <img className={classes.backgrondSvg} src={Blob2} alt=\"blob2\" />\n      </div>\n      <Paper className={classes.paper}>\n        <Button\n          className={classes.registerButton}\n          onClick={() => {\n            setOnLogin(!onLogin)\n            setOnRegister(!onRegister)\n          }}\n        >\n          REGISTER\n        </Button>\n\n        <FormLogin\n          open={onLogin}\n        />\n\n        {/* <FormLogin\n          open={onRegister}\n        /> */}\n      </Paper>\n    </Dialog>\n  )\n}\n\nexport default _\n","import React from \"react\";\nimport { defaults, AuthContext } from \"./authContext\";\nimport Auth from \"./Auth\";\n\nconst _ = (props:any):any => {\n\n    const [state, dispatch] = React.useState(defaults);\n\n    return (\n        <AuthContext.Provider\n            value={{\n                authState: state,\n                dispatch: (payload: any) => dispatch({...state, ...payload})\n            }}\n        >\n            <Auth />\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default _;\n","import createTheme from '@material-ui/core/styles/createTheme'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport React from 'react'\nimport { AuthProvider } from './modules/useAuth'\nimport { CssBaseline } from '@material-ui/core'\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#890ACB',\n      main: '#6F09B2',\n      dark: '#3B0680',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#DD0BE3',\n      main: '#C00BE3',\n      dark: '#A20BE3',\n      contrastText: '#fff'\n    },\n    type: 'dark'\n  },\n  overrides: {\n    MuiOutlinedInput: {\n      input: {\n        '&:-webkit-autofill': {\n          color: '#fff !important',\n          appearance: 'none',\n          caretColor: '#6F09B2',\n          WebkitTextFillColor: '#fff !important',\n          backgroundColor: '#DD0BE3 !important',\n          WebkitBoxShadow: \"0 0 0 1000px #424242 inset\",\n        },\n      },\n    },\n    MuiFilledInput: {\n      input: {\n        '&:-webkit-autofill': {\n          color: '#fff !important',\n          appearance: 'none',\n          borderTopColor: '#535353',\n          borderBottomColor: '#535353',\n          borderLeftColor: '#535353',\n          borderRightColor: '#535353',\n          caretColor: '#6F09B2',\n          boxShadow: '0 0 0 1000px #535353 inset !important',\n          WebkitTextFillColor: '#fff !important',\n          backgroundColor: '#535353 !important',\n          WebkitBoxShadow: \"0 0 0 1000px #535353 inset\",\n        },\n      },\n    },\n  },\n})\n\nfunction App(): any {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AuthProvider>\n        <div>#TODO</div>\n      </AuthProvider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}